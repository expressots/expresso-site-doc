"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[9217],{8340:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"features/error-handling","title":"Error handling","description":"Error handling in ExpressoTS APIs.","source":"@site/docs/features/error-handling.mdx","sourceDirName":"features","slug":"/features/error-handling","permalink":"/docs/next/features/error-handling","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Error handling","description":"Error handling in ExpressoTS APIs."},"sidebar":"tutorialSidebar","previous":{"title":"Status code","permalink":"/docs/next/features/status-code"},"next":{"title":"Testing","permalink":"/docs/next/features/test"}}');var t=n(4848),o=n(8453);const a={sidebar_position:3,title:"Error handling",description:"Error handling in ExpressoTS APIs."},i="Error handling",d={},l=[{value:"Our approach",id:"our-approach",level:2},{value:"Components",id:"components",level:2},{value:"Report",id:"report",level:4},{value:"Middleware",id:"middleware",level:4},{value:"App provider error handling",id:"app-provider-error-handling",level:2},{value:"Usage example",id:"usage-example",level:2},{value:"Support us \u2764\ufe0f",id:"support-us-\ufe0f",level:2}];function c(e){const r={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"error-handling",children:"Error handling"})}),"\n",(0,t.jsx)(r.p,{children:"When it comes to error handling in Node.js TypeScript APIs, there are several best practices and approaches you can follow. ExpressoTS provides a simple and easy way to handle errors."}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:["We use HTTP status codes appropriately: HTTP ",(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/docs/next/features/status-code",children:"status codes"})})," are used to indicate the status of a response. It is important to use them appropriately in your API to indicate the success or failure of an operation."]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:"We use a consistent error format: Define a consistent error format across your API so that consumers can easily understand and handle errors."}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:"We handle errors in middleware: Middleware functions are a great way to handle errors in a centralized location."}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:"We use try-catch blocks: Use try-catch blocks to handle synchronous errors in your code. If an error occurs in the try block, the catch block can handle it. Be sure to throw the error so that it can be handled by our error handling middleware."}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:"We use async/await error handling: When using async/await, you can use try-catch blocks to handle synchronous errors in your code. However, you also need to handle any asynchronous errors that may occur."}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:"We log errors: Logging errors is important for debugging and monitoring."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"our-approach",children:"Our approach"}),"\n",(0,t.jsxs)(r.p,{children:["We developed a standardized error reporting class called ",(0,t.jsx)(r.code,{children:"Report"})," that provides a centralized location for throwing and handling errors, which can simplify error handling throughout the application.\nBy defining a standard error response format, it helps to ensure consistency in error messages that are returned to clients."]}),"\n",(0,t.jsx)(r.h2,{id:"components",children:"Components"}),"\n",(0,t.jsx)(r.p,{children:"Here are the components that we use to handle errors in ExpressoTS:"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Object"}),(0,t.jsx)(r.th,{children:"Description"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Report.Error"}),(0,t.jsx)(r.td,{children:"Method to report known errors."})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"AppError"}),(0,t.jsx)(r.td,{children:"App Error class that defines error object format."})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"StatusCode"}),(0,t.jsx)(r.td,{children:"Http responses code and message."})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Error Message"}),(0,t.jsx)(r.td,{children:"Error message detail that the developer wants to log."})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Error Service"}),(0,t.jsx)(r.td,{children:"To be used in the log system to indicate where the error was generated."})]})]})]}),"\n",(0,t.jsx)(r.h4,{id:"report",children:"Report"}),"\n",(0,t.jsx)(r.p,{children:"Report class is a utility class to manage and throw application-specific errors."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",metastring:'title="Report class"',children:"class Report {\n  /**\n   * @param error - An instance of Error or a string that describes the error.\n   * @param statusCode - The HTTP status code associated with the error (default is 500).\n   * @param service - The service name associated with the error.\n   * @throws An object of the custom type AppError, which includes details about the error.\n   */\n  public Error(\n    error: Error | string,\n    statusCode?: number,\n    service?: string,\n  ): AppError {\n}\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Once you report a known error through the ",(0,t.jsx)(r.code,{children:"Report.Error()"})," method, the error will be handled by the ",(0,t.jsx)(r.code,{children:"defaultErrorHandler()"})," middleware and will be returned to the client in the json parsed format."]}),"\n",(0,t.jsx)(r.h4,{id:"middleware",children:"Middleware"}),"\n",(0,t.jsx)(r.p,{children:"This middleware function is used to handle errors that occur during request processing."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",metastring:'title="defaultErrorHandler middleware"',children:"function defaultErrorHandler(\n    error: Error,\n    req: Request,\n    res: Response,\n    next: NextFunction,\n    showStackTrace: boolean = false\n): void {}\n\nexport default defaultErrorHandler;\n"})}),"\n",(0,t.jsx)(r.admonition,{type:"info",children:(0,t.jsxs)(r.p,{children:["function ",(0,t.jsx)(r.code,{children:"defaultErrorHandler()"})," is a custom Express error-handling middleware function.\nIt logs the error, sets the status code, and sends a JSON response containing the status code and error message."]})}),"\n",(0,t.jsx)(r.h2,{id:"app-provider-error-handling",children:"App provider error handling"}),"\n",(0,t.jsx)(r.p,{children:"When a project is created using the ExpressoTS CLI, the default error handling is already set up in the project structure."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",metastring:'title="App provider error handling"',children:"export class App extends AppExpress {\n    protected configureServices(): void | Promise<void> {\n        this.Middleware.setErrorHandler();\n    }\n}\n"})}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"setErrorHandler()"})," method is used to set up the error handling middleware in the application. It allows ExpressoTS to handle errors in a centralized location as well as to send\na consistent error response to the client in a JSON format."]}),"\n",(0,t.jsxs)(r.p,{children:["You can also pass two optional parameters to the ",(0,t.jsx)(r.code,{children:"setErrorHandler()"})," method:"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"showStackTrace"}),": A boolean value that indicates whether to show the stack trace in the error response. The default value is ",(0,t.jsx)(r.code,{children:"false"}),"."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"customErrorHandler"}),": A custom error handler function that can be used to handle errors in a specific way. The default value is defaultErrorHandler."]}),"\n"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",metastring:'title="Using your own error handler"',children:"this.Middleware.setErrorHandler({ errorHandler: myErrorHandler });\n"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",metastring:'title="Using showStackTrace in the default error handler"',children:"this.Middleware.setErrorHandler({ showStackTrace: true });\n"})}),"\n",(0,t.jsx)(r.admonition,{type:"info",children:(0,t.jsxs)(r.p,{children:["In the ",(0,t.jsx)(r.code,{children:"showStackTrace"})," example, the error response will include a formated stack trace message. We tried to make stack trace messages more readable and easy to understand."]})}),"\n",(0,t.jsx)(r.h2,{id:"usage-example",children:"Usage example"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",metastring:'title="Using Report class"',children:'class FooClass {\n    constructor(private report: Report) {}\n\n    execute() {\n        try {\n            // do something\n        } catch (error: any) {\n            this.report.error(error, StatusCode.BadRequest, "your-service");\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(r.p,{children:"Use case example:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",metastring:'title="Use case example"',children:'@provide(CreateUserUseCase)\nclass CreateUserUseCase {\n    constructor(private userRepository: UserRepository, private report: Report) {}\n\n    execute(data: ICreateUserRequestDTO): ICreateUserResponseDTO | null {\n        try {\n            const { name, email } = data;\n\n            const userAlreadyExists = await this.userRepository.findByEmail(email);\n\n            if (userAlreadyExists) {\n                throw this.report.error(\n                    "User already exists",\n                    StatusCode.BadRequest,\n                    "create-user-usecase"\n                );\n            }\n\n            const user: User | null = this.userRepository.create(new User(name, email));\n\n            let response: ICreateUserResponseDTO;\n\n            if (user !== null) {\n                response = {\n                    id: user.Id,\n                    name: user.name,\n                    email: user.email,\n                    status: "success",\n                };\n                return response;\n            }\n\n            return null;\n        } catch (error: any) {\n            throw error;\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(r.p,{children:"You can also throw the this.report.Error() method directly:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",metastring:'title="Throw using this.report.Error()"',children:'@provide(CreateUserUseCase)\nclass CreateUserUseCase {\n    constructor(private userRepository: UserRepository, private report: Report) {}\n\n    execute(data: ICreateUserRequestDTO): ICreateUserResponseDTO | null {\n        const { name, email } = data;\n\n        const userAlreadyExists = await this.userRepository.findByEmail(email);\n\n        if (userAlreadyExists) {\n            throw this.report.error(\n                "User already exists",\n                StatusCode.BadRequest,\n                "create-user-usecase"\n            );\n        }\n\n        const user: User | null = this.userRepository.create(new User(name, email));\n\n        let response: ICreateUserResponseDTO;\n\n        if (user !== null) {\n            response = {\n                id: user.Id,\n                name: user.name,\n                email: user.email,\n                status: "success",\n            };\n            return response;\n        }\n\n        return null;\n    }\n}\n'})}),"\n",(0,t.jsxs)(r.p,{children:["This error will be handled by the ",(0,t.jsx)(r.code,{children:"defaultErrorHandler()"})," middleware and will be returned to the client in the json parsed format via request response as well as logged in the console."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-json",metastring:'title="Error response"',children:'{\n    "statusCode": 400,\n    "error": "User already exists"\n}\n'})}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{id:"support-us-\ufe0f",children:"Support us \u2764\ufe0f"}),"\n",(0,t.jsxs)(r.p,{children:["ExpressoTS is an MIT-licensed open source project. It's an independent project with ongoing development made possible thanks to your support.\nIf you'd like to help, please read our ",(0,t.jsx)(r.strong,{children:(0,t.jsx)(r.a,{href:"/docs/next/support-us",children:"support guide"})}),"."]})]})}function h(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>i});var s=n(6540);const t={},o=s.createContext(t);function a(e){const r=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(o.Provider,{value:r},e.children)}}}]);