"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[9856],{7483:(e,l,s)=>{s.r(l),s.d(l,{assets:()=>r,contentTitle:()=>d,default:()=>c,frontMatter:()=>t,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"guides/file-upload","title":"File Upload","description":"Learn how to handle file uploads in ExpressoTS.","source":"@site/versioned_docs/version-3.0.0/guides/file-upload.mdx","sourceDirName":"guides","slug":"/guides/file-upload","permalink":"/docs/guides/file-upload","draft":false,"unlisted":false,"tags":[],"version":"3.0.0","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"File Upload","description":"Learn how to handle file uploads in ExpressoTS."},"sidebar":"tutorialSidebar","previous":{"title":"Repositories","permalink":"/docs/guides/repositories"},"next":{"title":"ROADMAP","permalink":"/docs/roadmap"}}');var n=s(4848),o=s(8453);const t={sidebar_position:3,title:"File Upload",description:"Learn how to handle file uploads in ExpressoTS."},d="File upload",r={},a=[{value:"Install",id:"install",level:2},{value:"Usage example",id:"usage-example",level:2},{value:"File upload decorator",id:"file-upload-decorator",level:2},{value:"Single file upload",id:"single-file-upload",level:2},{value:"Array of files",id:"array-of-files",level:2},{value:"Multiple file fields",id:"multiple-file-fields",level:2},{value:"Any file type",id:"any-file-type",level:2},{value:"No file type filter",id:"no-file-type-filter",level:2},{value:"Support us \u2764\ufe0f",id:"support-us-\ufe0f",level:2}];function p(e){const l={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(l.header,{children:(0,n.jsx)(l.h1,{id:"file-upload",children:"File upload"})}),"\n",(0,n.jsxs)(l.p,{children:["File uploads are a common requirement in web applications, allowing users to upload files like images, videos, documents, etc. to the server.\nIn ExpressoTS, you can handle file uploads using the ",(0,n.jsx)(l.code,{children:"multer"})," middleware, which simplifies the process of receiving files from the client."]}),"\n",(0,n.jsxs)(l.p,{children:["The ",(0,n.jsx)(l.code,{children:"multer"})," middleware handles the multipart/form-data encoding used for file uploads, parsing the incoming request\nand storing the files in a specified location on the server."]}),"\n",(0,n.jsx)(l.h2,{id:"install",children:"Install"}),"\n",(0,n.jsxs)(l.p,{children:["Install the ",(0,n.jsx)(l.code,{children:"multer"})," middleware using npm."]}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-bash",children:"npm i multer && npm i -D @types/multer\n"})}),"\n",(0,n.jsxs)(l.p,{children:["With ",(0,n.jsx)(l.code,{children:"multer"})," installed in your project, you can now use it to handle file uploads in your ExpressoTS application via ",(0,n.jsx)(l.code,{children:"app provider"})," or on specific routes."]}),"\n",(0,n.jsx)(l.h2,{id:"usage-example",children:"Usage example"}),"\n",(0,n.jsxs)(l.p,{children:["Here's an example of how to use ",(0,n.jsx)(l.code,{children:"multer"})," in the ",(0,n.jsx)(l.code,{children:"app.provider.ts"})," file to handle file uploads."]}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-typescript",metastring:'title="Create multer object then use it in the router"',children:'@provide(App)\nexport class App extends AppExpress {\n    protected configureServices(): void {\n        const file = this.Middleware.setupMulter({ dest: "uploads" });\n\n        this.Middleware.addMiddleware({\n            path: "/",\n            middlewares: [file.single("file")],\n        });\n    }\n}\n'})}),"\n",(0,n.jsxs)(l.p,{children:["In the example above, we create a ",(0,n.jsx)(l.code,{children:"multer"})," object with the destination folder for storing the uploaded files. We then use the ",(0,n.jsx)(l.code,{children:'file.single("file")'})," middleware to handle a single file upload with the field name ",(0,n.jsx)(l.code,{children:"file"}),"."]}),"\n",(0,n.jsx)(l.p,{children:"Simplest use case of file upload with ExpressoTS."}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-typescript",metastring:'title="Simplest use case of file upload"',children:'@controller("/")\nexport class AppController {\n    @Post("/avatar")\n    @FileUpload({ fieldName: "avatar" }, { dest: "uploads/" })\n    execute() {\n        return "File uploaded successfully";\n    }\n}\n'})}),"\n",(0,n.jsxs)(l.p,{children:["If Request and Response objects are not included in the method, the ",(0,n.jsx)(l.code,{children:"@FileUpload"})," decorator will automatically inject them into the method providing a standard\nresponse using ",(0,n.jsx)(l.code,{children:"res.send()"})," method."]}),"\n",(0,n.jsx)(l.h2,{id:"file-upload-decorator",children:"File upload decorator"}),"\n",(0,n.jsxs)(l.p,{children:["You can also use the ",(0,n.jsx)(l.code,{children:"@FileUpload"})," decorator to handle file uploads on specific routes."]}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-typescript",metastring:'title="File upload decorator"',children:'@FileUpload({ fieldName: "file" }, { dest: "uploads/" })\n'})}),"\n",(0,n.jsx)(l.h2,{id:"single-file-upload",children:"Single file upload"}),"\n",(0,n.jsxs)(l.p,{children:["You can handle single file uploads by specifying the ",(0,n.jsx)(l.code,{children:"fieldName"})," option in the ",(0,n.jsx)(l.code,{children:"@FileUpload"})," decorator."]}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-typescript",metastring:'title="Single file upload"',children:'@controller("/")\nexport class AppController {\n    @Post("/")\n    @FileUpload({ fieldName: "file" }, { dest: "uploads/" })\n    execute(@request() req: Request, @response() res: Response) {\n        return res.status(200).send("File uploaded successfully");\n    }\n}\n'})}),"\n",(0,n.jsxs)(l.p,{children:["In the example above, we use the ",(0,n.jsx)(l.code,{children:"@FileUpload"})," decorator to handle file uploads on the ",(0,n.jsx)(l.code,{children:"/"})," route. The ",(0,n.jsx)(l.code,{children:"fieldName"})," option specifies the field name of the file input, and the ",(0,n.jsx)(l.code,{children:"dest"})," option specifies the destination folder for storing the uploaded files."]}),"\n",(0,n.jsx)(l.h2,{id:"array-of-files",children:"Array of files"}),"\n",(0,n.jsxs)(l.p,{children:["You can also handle multiple file uploads by specifying the ",(0,n.jsx)(l.code,{children:"maxCount"})," option in the ",(0,n.jsx)(l.code,{children:"@FileUpload"})," decorator."]}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-typescript",metastring:'title="Multiple file uploads"',children:'@controller("/")\nexport class AppController {\n    @Post("/")\n    @FileUpload({ fieldName: "files", maxCount: 5 }, { dest: "uploads/" })\n    execute(@request() req: Request, @response() res: Response) {\n        return res.status(200).send("Files uploaded successfully");\n    }\n}\n'})}),"\n",(0,n.jsxs)(l.p,{children:["In the example above, we use the ",(0,n.jsx)(l.code,{children:"maxCount"})," option to specify that a maximum of 5 files can be uploaded. The ",(0,n.jsx)(l.code,{children:"fieldName"})," option specifies the field name of the file input, and the ",(0,n.jsx)(l.code,{children:"dest"})," option specifies the destination folder for storing the uploaded files."]}),"\n",(0,n.jsx)(l.h2,{id:"multiple-file-fields",children:"Multiple file fields"}),"\n",(0,n.jsxs)(l.p,{children:["You can handle multiple file fields by specifying the ",(0,n.jsx)(l.code,{children:"fields"})," option in the ",(0,n.jsx)(l.code,{children:"@FileUpload"})," decorator."]}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-typescript",metastring:'title="Multiple file fields"',children:'@controller("/")\nexport class AppController {\n    @Post("/")\n    @FileUpload(\n        [\n            { fieldName: "avatar", maxCount: 1 },\n            { fieldName: "gallery", maxCount: 2 },\n        ],\n        { dest: "fields/" }\n    )\n    execute(@request() req: Request, @response() res: Response) {\n        return res.status(200).send("Files uploaded successfully");\n    }\n}\n'})}),"\n",(0,n.jsxs)(l.p,{children:["In the example above, we use an array of objects to specify multiple file fields. Each object contains the ",(0,n.jsx)(l.code,{children:"fieldName"})," and ",(0,n.jsx)(l.code,{children:"maxCount"})," options for the file input fields. The ",(0,n.jsx)(l.code,{children:"dest"})," option specifies the destination folder for storing the uploaded files."]}),"\n",(0,n.jsx)(l.h2,{id:"any-file-type",children:"Any file type"}),"\n",(0,n.jsxs)(l.p,{children:["You can allow any file type to be uploaded by specifying the ",(0,n.jsx)(l.code,{children:"fileFilter"})," option in the ",(0,n.jsx)(l.code,{children:"@FileUpload"})," decorator."]}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-typescript",metastring:'title="Allow any file type"',children:'@controller("/")\nexport class AppController {\n    @Post("/")\n    @FileUpload({ any: true })\n    execute(@request() req: Request, @response() res: Response) {\n        return res.status(200).send("File uploaded successfully");\n    }\n}\n'})}),"\n",(0,n.jsxs)(l.p,{children:["In the example above, we use the ",(0,n.jsx)(l.code,{children:"any"})," option to allow any file type to be uploaded. This option bypasses the default file type filter and allows all file types to be uploaded."]}),"\n",(0,n.jsx)(l.h2,{id:"no-file-type-filter",children:"No file type filter"}),"\n",(0,n.jsxs)(l.p,{children:["You can disable the file type filter by specifying the ",(0,n.jsx)(l.code,{children:"disableFileFilter"})," option in the ",(0,n.jsx)(l.code,{children:"@FileUpload"})," decorator."]}),"\n",(0,n.jsx)(l.pre,{children:(0,n.jsx)(l.code,{className:"language-typescript",metastring:'title="Disable file type filter"',children:'@controller("/")\nexport class AppController {\n    @Post("/")\n    @FileUpload({ none: true })\n    execute(@request() req: Request, @response() res: Response) {\n        return res.status(200).send("No file uploaded, form data received");\n    }\n}\n'})}),"\n",(0,n.jsxs)(l.p,{children:["Make sure to explore the ",(0,n.jsx)(l.a,{href:"https://www.npmjs.com/package/multer",children:"multer"})," documentation for more options and configurations to handle file uploads in your ExpressoTS application."]}),"\n",(0,n.jsx)(l.p,{children:"The @FileUpload decorator supports all the options provided by multer."}),"\n",(0,n.jsx)(l.hr,{}),"\n",(0,n.jsx)(l.h2,{id:"support-us-\ufe0f",children:"Support us \u2764\ufe0f"}),"\n",(0,n.jsxs)(l.p,{children:["ExpressoTS is an MIT-licensed open source project. It's an independent project with ongoing development made possible thanks to your support.\nIf you'd like to help, please read our ",(0,n.jsx)(l.strong,{children:(0,n.jsx)(l.a,{href:"/docs/support-us",children:"support guide"})}),"."]})]})}function c(e={}){const{wrapper:l}={...(0,o.R)(),...e.components};return l?(0,n.jsx)(l,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},8453:(e,l,s)=>{s.d(l,{R:()=>t,x:()=>d});var i=s(6540);const n={},o=i.createContext(n);function t(e){const l=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(l):{...l,...e}}),[l,e])}function d(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:t(e.components),i.createElement(o.Provider,{value:l},e.children)}}}]);