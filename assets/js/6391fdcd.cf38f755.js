"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[5115],{6647:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>n,toc:()=>p});const n=JSON.parse('{"id":"features/test","title":"Testing","description":"How to test your ExpressoTS APIs.","source":"@site/versioned_docs/version-3.0.0/features/test.mdx","sourceDirName":"features","slug":"/features/test","permalink":"/docs/features/test","draft":false,"unlisted":false,"tags":[],"version":"3.0.0","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"Testing","description":"How to test your ExpressoTS APIs."},"sidebar":"tutorialSidebar","previous":{"title":"Error handling","permalink":"/docs/features/error-handling"},"next":{"title":"Render engine","permalink":"/docs/features/render"}}');var r=s(4848),i=s(8453);const o={sidebar_position:4,title:"Testing",description:"How to test your ExpressoTS APIs."},a="Testing",l={},p=[{value:"Our goal",id:"our-goal",level:2},{value:"Testing usage example",id:"testing-usage-example",level:2},{value:"E2E testing with supertest",id:"e2e-testing-with-supertest",level:2},{value:"Support us \u2764\ufe0f",id:"support-us-\ufe0f",level:2}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"testing",children:"Testing"})}),"\n",(0,r.jsx)(t.p,{children:"Unit and integration testing are both crucial in application development, each serving a unique purpose:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"Unit tests: Focus on testing individual pieces of code, like a single function or method, in isolation. Dependencies are mocked to ensure controlled, reliable testing. Unit tests help catch bugs early and ensure that each part of the code works correctly, simplifying debugging later."}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"Integration tests: Test the interaction between different components and external services. Unlike unit tests, they evaluate the application as a whole to ensure all parts work together as expected."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.admonition,{type:"tip",children:(0,r.jsx)(t.p,{children:"Combining unit tests and integration tests can be beneficial because it allows developers to test both individual units of code and the application as a whole.\nThis helps ensure that each piece of code is working correctly on its own and in conjunction with other parts of the application."})}),"\n",(0,r.jsx)(t.h2,{id:"our-goal",children:"Our goal"}),"\n",(0,r.jsx)(t.p,{children:"Our goal is to provide a simple and easy way to test your ExpressoTS APIs. We are working on a test library that wraps a modern testing framework to provide a simple and intuitive API for writing unit and integration tests.\nThe test library will include:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"A test runner"}),"\n",(0,r.jsx)(t.li,{children:"Adding the test library of your choice"}),"\n",(0,r.jsx)(t.li,{children:"A test suite"}),"\n",(0,r.jsx)(t.li,{children:"A test case"}),"\n",(0,r.jsx)(t.li,{children:"A test assertion library"}),"\n",(0,r.jsx)(t.li,{children:"A test coverage tool"}),"\n",(0,r.jsx)(t.li,{children:"CLI command to scaffold tests"}),"\n"]}),"\n",(0,r.jsx)(t.admonition,{title:"Stay tuned for updates on our test library!",type:"caution"}),"\n",(0,r.jsx)(t.h2,{id:"testing-usage-example",children:"Testing usage example"}),"\n",(0,r.jsx)(t.p,{children:"We will demonstrate how to test a simple ExpressoTS API using Jest and Supertest. You can use the test library of your choice."}),"\n",(0,r.jsxs)(t.p,{children:["Below we are testing the PingUseCase endpoint return. We are using the ",(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.a,{href:"https://jestjs.io/",children:"Jest"})})," as the test runner and ",(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.a,{href:"https://www.npmjs.com/package/ts-jest",children:"ts-jest"})})," as the TypeScript preprocessor."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",metastring:'title="ping.use-case.spec.ts"',children:'describe("PingUseCase", () => {\n    let pingUseCase: PingUseCase;\n\n    beforeEach(() => {\n        pingUseCase = new PingUseCase();\n    });\n\n    it("should return a valid PingResponseDTO", () => {\n        const start: Date = new Date();\n        const response = pingUseCase.execute(start);\n        const end: Date = new Date(response.end);\n        const ttl = parseFloat(response.ttl.split(" ")[0]);\n\n        expect(response).toHaveProperty("start");\n        expect(response).toHaveProperty("end");\n        expect(response).toHaveProperty("ttl");\n        expect(response).toHaveProperty("message");\n        expect(response.message).toBe("Pong!");\n        expect(start <= end).toBe(true);\n        expect(ttl >= 0).toBe(true);\n    });\n});\n'})}),"\n",(0,r.jsx)(t.h2,{id:"e2e-testing-with-supertest",children:"E2E testing with supertest"}),"\n",(0,r.jsxs)(t.p,{children:["We have available a method called ",(0,r.jsx)(t.code,{children:"getHttpServer()"})," in the ",(0,r.jsx)(t.code,{children:"AppExpress"})," class that returns a proxy to the Express server. This method is useful for testing the application using ",(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.a,{href:"https://www.npmjs.com/package/supertest",children:"Supertest"})}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["Alonside with this method, we have the ",(0,r.jsx)(t.code,{children:"close()"})," method that closes the server and releases the resources."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-typescript",metastring:'title="GET /v1 test"',children:'import { AppFactory, StatusCode } from "@expressots/core";\nimport { IWebServerPublic } from "@expressots/shared";\n\nimport express from "express";\nimport request from "supertest";\n\nimport { App } from "../src/app";\n\ndescribe("App Test", () => {\n    let server: express.Application;\n    let appInstance: IWebServerPublic;\n\n    beforeAll(async () => {\n        appInstance = await AppFactory.create(App);\n        await appInstance.listen(3000);\n\n        server = await appInstance.getHttpServer();\n    });\n\n    afterAll(async () => {\n        await appInstance.close();\n    });\n\n    it("returns a valid app response", async () => {\n        return request(server).get("/v1").expect(StatusCode.OK).expect("Hello from ExpressoTS!");\n    });\n});\n'})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h2,{id:"support-us-\ufe0f",children:"Support us \u2764\ufe0f"}),"\n",(0,r.jsxs)(t.p,{children:["ExpressoTS is an MIT-licensed open source project. It's an independent project with ongoing development made possible thanks to your support.\nIf you'd like to help, please read our ",(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.a,{href:"/docs/support-us",children:"support guide"})}),"."]})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>a});var n=s(6540);const r={},i=n.createContext(r);function o(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);