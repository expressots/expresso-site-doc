"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[570],{163:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"features/envvalidator","title":"Env validator","description":"Validates the existence of the .env file and its content.","source":"@site/versioned_docs/version-2.16.2/features/envvalidator.mdx","sourceDirName":"features","slug":"/features/envvalidator","permalink":"/docs/2.16.2/features/envvalidator","draft":false,"unlisted":false,"tags":[],"version":"2.16.2","sidebarPosition":8,"frontMatter":{"sidebar_position":8,"title":"Env validator","description":"Validates the existence of the .env file and its content."},"sidebar":"tutorialSidebar","previous":{"title":"DTO validator","permalink":"/docs/2.16.2/features/dto-validator"},"next":{"title":"DB in memory","permalink":"/docs/2.16.2/features/in-memory-db"}}');var i=t(4848),s=t(8453);const o={sidebar_position:8,title:"Env validator",description:"Validates the existence of the .env file and its content."},a="Environment validator",l={},d=[{value:"Setup",id:"setup",level:2},{value:"Method checkAll",id:"method-checkall",level:2},{value:"Method get",id:"method-get",level:2},{value:"Using everywhere",id:"using-everywhere",level:2},{value:"Support us \u2764\ufe0f",id:"support-us-\ufe0f",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"environment-validator",children:"Environment validator"})}),"\n",(0,i.jsxs)(n.p,{children:["The environment validator provider is used to validate the existence of the ",(0,i.jsx)(n.code,{children:".env"})," file and its content.\nIt helps the developer to avoid runtime errors caused by missing environment variables."]}),"\n",(0,i.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,i.jsxs)(n.p,{children:["To use the environment validator provider, you need to make sure it is registered in the ",(0,i.jsx)(n.code,{children:"configureServices()"})," method of the ",(0,i.jsx)(n.code,{children:"App"})," class.\nOnce registered, the provider will be available in the application through the DI Container."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"    protected configureServices(): void | Promise<void> {\n        this.provider.register(Env);\n    }\n"})}),"\n",(0,i.jsx)(n.h2,{id:"method-checkall",children:"Method checkAll"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"checkAll()"})," method is used to validate the existence of the ",(0,i.jsx)(n.code,{children:".env"})," file and its content by checking if all the environment variables are defined."]}),"\n",(0,i.jsxs)(n.p,{children:["You can define from where to call the ",(0,i.jsx)(n.code,{children:"checkAll()"})," method. It can be called in the ",(0,i.jsx)(n.code,{children:"postServerInitialization()"})," method or in any other method that you prefer."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"    protected postServerInitialization(): void | Promise<void> {\n        if (this.isDevelopment()) {\n            this.provider.get(Env).checkAll();\n        }\n    }\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If the ",(0,i.jsx)(n.code,{children:".env"})," file is missing or if any environment variable is not defined, the ",(0,i.jsx)(n.code,{children:"checkAll()"})," method will throw an error with a message indicating the missing environment variables."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",metastring:'title="PORT environment variable is missing"',children:"[PID:26759] ERROR [env-validator-provider] Environment variable PORT is not defined.\n"})}),"\n",(0,i.jsx)(n.h2,{id:"method-get",children:"Method get"}),"\n",(0,i.jsxs)(n.p,{children:["The environment validator provider also has a method called ",(0,i.jsx)(n.code,{children:"get()"})," that returns the value of an environment variable. It is used to get a specific environment variable value passing its name as a parameter."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'this.provider.get(Env).get("PORT");\n'})}),"\n",(0,i.jsx)(n.h2,{id:"using-everywhere",children:"Using everywhere"}),"\n",(0,i.jsxs)(n.p,{children:["You can use the ",(0,i.jsx)(n.code,{children:"Env"})," provider in any class by injecting it into the constructor of your usecase, service, provider, controller or any other class."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'import { Get, controller } from "@expressots/adapter-express";\nimport { Env } from "@expressots/core";\n\n@controller("/")\nexport class AppController {\n    constructor(private env: Env) {}\n\n    @Get("/")\n    execute(): string {\n        console.log(this.env.get("PORT"));\n        return "Hello from Expressots!";\n    }\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"support-us-\ufe0f",children:"Support us \u2764\ufe0f"}),"\n",(0,i.jsxs)(n.p,{children:["ExpressoTS is an MIT-licensed open source project. It's an independent project with ongoing development made possible thanks to your support.\nIf you'd like to help, please read our ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/docs/2.16.2/support-us",children:"support guide"})}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(6540);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);